{
  "Main Function": {
    "prefix": "rbase",
    "body": [
        "use std::io;",
      "fn main() {",
      "    println!(\"Hello, world!\");",
      "}"
    ],
    "description": "Creates a main function with println!"
  },

  "Mute Variable template":{
    "prefix": "mv",
    "body": "let mut var_name;",
    "description": "Mut variable snippet"
  },


  "Print Template":{
    "prefix": "prnt",
    "body":[
    "println!(\"\");",
    ],
     "description": "Write a println! statement"
  },
  

  "Function Template": {
    "prefix": "fn",
    "body": [
      "fn func_name(argu:datatype){",
      "    $0",
      "}"
    ],
    "description": "Create a function template"
  },
"IF else statement": {
  "prefix": "if",
  "body": [
    "if ${1:condition} {",
    "    ${2:// code}",
    "} else {",
    "    ${3:println!(\"${4:Something}\");}",
    "}"
  ],
  "description": "Basic if-else statement"
},
"IF ELSE IF ELSE statement": {
  "prefix": "elif",
  "body": [
    "if ${1:condition1} {",
    "    ${2:// code}",
    "} else if ${3:condition2} {",
    "    ${4:// code}",
    "} else {",
    "    ${5:// code}",
    "}"
  ],
  "description": "Multi-branch if-else if-else statement"
},

"For loop": {
  "prefix": "for",
  "body": [
    "for ${1:i} in ${2:0..5} {",
    "    ${3:// code}",
    "}"
  ],
  "description": "For loop base statement"
},
"While loop": {
  "prefix": "while",
  "body": [
    "while ${1:condition} {",
    "    ${2:// code}",
    "}"
  ],
  "description": "While loop base statement"
},

"Infinite Loop": {
  "prefix": "infinite loop",
  "body": [
    "loop {",
    "    if !${1:condition} {",
    "        break;", 
    "    }",
    "    ${2:// code}",
    "}"
  ],
  "description": "Simulates a do-while style infinite loop"
},
"Match Statement": {
  "prefix": "match",
  "body": [
    "match ${1:variable} {",
    "    1 => println!(\"One\"),",
    "    2 => println!(\"Two\"),",
    "    3 => println!(\"Three\"),",
    "    _ => println!(\"Error statement\"),",
    "}"
  ],
  "description": "Basic match statement syntax"
},

"Struct Syntax": {
  "prefix": "struct",
  "body": [
    "struct ${1:Person} {",
    "    ${2:name}: String,",
    "    ${3:age}: i64",
    "}$0"
  ],
  "description": "Struct statement syntax"
},

"Tuple Declaration": {
  "prefix": "tuple",
  "body": [
    "let ${1:tup}: (${2:i32}, ${3:f64}, ${4:&str}) = (${5:500}, ${6:6.4}, ${7:\"hello\"});"
  ],
  "description": "Tuple with i32, f64, and &str values"
},
"Enum Definition": {
  "prefix": "enum",
  "body": [
    "enum ${1:EnumName} {",
    "    ${2:Variant1},",
    "    ${3:Variant2},",
    "}"
  ],
  "description": "Define an enum with variants"
},
"Option Example": {
  "prefix": "option",
  "body": [
    "let ${1:maybe_number}: Option<i32> = Some(${2:10});",
    "",
    "match ${1:maybe_number} {",
    "    Some(value) => println!(\"Value is: {}\", value),",
    "    None => println!(\"No value found\"),",
    "}"
  ],
  "description": "Defines an Option and matches on Some/None"
}










}